{
  "name": "Coursera: R Programming, Homework 3 Question 3",
  "tagline": "",
  "body": "### Introduction\r\n\r\nThis data set is from the John Hopkins University Coursera Course titled: \"R Programming\". The current examples are pulled from **question 3** of **homework assignment 3**. You can find the text (verbatim) for the assignment below:\r\n\r\n_Write a function called rankhospital that takes three arguments: the 2-character abbreviated name of a_\r\n_state (state), an outcome (outcome), and the ranking of a hospital in that state for that outcome (num)._\r\n_The function reads the outcome-of-care-measures.csv \fand returns a character vector with the name_\r\n_of the hospital that has the ranking speci\fed by the num argument. For example, the call rankhospital(\"MD\", \"heart failure\", 5) would return a character vector containing the name of the hospital with the 5th lowest 30-day death rate for heart failure. The num argument can take values \"best\", \"worst\", or an integer indicating the ranking (smaller numbers are better). If the number given by num is larger than the number of hospitals in that state, then the function should return NA. Hospitals that do not have data on a particular outcome should be excluded from the set of hospitals when deciding the rankings._\r\n\r\n_Handling ties. It may occur that multiple hospitals have the same 30-day mortality rate for a given cause_\r\n_of death. In those cases ties should be broken by using the hospital name. For example, in Texas (\"TX\"),_\r\n_the hospitals with lowest 30-day mortality rate for heart failure are shown here._\r\n\r\n_The function should use the following template._\r\n\r\n    rankhospital <- function(state, outcome, num = \"best\") {\r\n    ## Read outcome data\r\n    ## Check that state and outcome are valid\r\n    ## Return hospital name in that state with the given rank\r\n    ## 30-day death rate\r\n    }\r\n\r\n_The function should check the validity of its arguments. If an invalid state value is passed to best, the_\r\n_function should throw an error via the stop function with the exact message \"invalid state\". If an invalid_\r\n_outcome value is passed to best, the function should throw an error via the stop function with the exact_\r\n_message \"invalid outcome\"._\r\n\r\n_Here is some sample output from the function._\r\n\r\n    > source(\"rankhospital.R\")\r\n    > rankhospital(\"TX\", \"heart failure\", 4)\r\n    [1] \"DETAR HOSPITAL NAVARRO\"\r\n    > rankhospital(\"MD\", \"heart attack\", \"worst\")\r\n    [1] \"HARFORD MEMORIAL HOSPITAL\"\r\n    > rankhospital(\"MN\", \"heart attack\", 5000)\r\n    [1] NA\r\n\r\n\r\n***\r\n\r\n\r\n\r\nThe data file can be found here: \r\n\r\n[Coursera R Programming Homework Assignment 3](https://github.com/mjtat/Coursera-Programming-Assignment-Homework-3-Question-3/raw/master/outcome-of-care-measures.csv).\r\n\r\n**The script below will do what the assignment asks, with minor cosmetic differences.** \r\n\r\n\r\n\r\n***\r\n\r\n\r\n### First read in the data, organize it into a new dataframe, then rename the columns.\r\n\r\n    ## Read in the data\r\n\r\n    outcome_dat <-\r\n        read.csv(\"outcome-of-care-measures.csv\",\r\n                 header = TRUE,\r\n                 stringsAsFactors = FALSE)\r\n\r\n    ## Select only the key variables from the original data.\r\n    outcome_dat_organized <-\r\n        data.frame(\r\n            as.character(outcome_dat$Hospital.Name),\r\n            as.character(outcome_dat$State),\r\n            outcome_dat$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,\r\n            outcome_dat$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,\r\n            outcome_dat$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,\r\n            stringsAsFactors = FALSE\r\n        )\r\n\r\n    # Rename the variables\r\n    names(outcome_dat_organized) <-\r\n        c(\"hospital\",\r\n          \"state\",\r\n          \"heart attack\",\r\n          \"heart failure\",\r\n          \"pneumonia\")\r\n\r\n\r\n### Remove all NA values.\r\n\r\n    #Remove all the NA values.\r\n    outcome_dat_organized$`heart attack`[outcome_dat_organized$`heart attack` == \"Not Available\"] <-\r\n        NA\r\n    outcome_dat_organized$`heart failure`[outcome_dat_organized$`heart failure` == \"Not Available\"] <-\r\n        NA\r\n    outcome_dat_organized$pneumonia[outcome_dat_organized$pneumonia == \"Not Available\"] <-\r\n        NA\r\n\r\n    outcome_dat_organized <-\r\n        outcome_dat_organized[complete.cases(outcome_dat_organized), ]\r\n\r\n### Create the `rank_hosp()` function.\r\n\r\n    ###\r\n    rank_hosp <- function(location, outcome, num) {\r\n\r\n### This part in the function evaluates the number of hospitals in a state, given your input parameters.\r\n\r\n        state_subset <- subset(outcome_dat_organized, location == state)\r\n        \r\n        len <- as.double(length(state_subset$hospital))\r\n        \r\n### This part of the function evaluates if you entered a string, and converts the string to lower case.\r\n\r\n        if (is.character(num) == TRUE){\r\n            num <- tolower(num)\r\n\r\n        } else {\r\n            num <- as.numeric(num)\r\n        }\r\n\r\n### This part evaluates if you entered `\"best\"` or `\"worst\"` as a value. It assigns a number (1, or the value of the last row in the resulting data frame)\r\n            \r\n        if (num == \"best\") {\r\n            num <- 1\r\n            \r\n        } else if (num == \"worst\") {\r\n            num <- len \r\n        }\r\n        \r\n### The next few parts creates lists of states, outcomes, and numbers. It then conducts a boolean operation to evaluate if the values you entered are valid. If `TRUE`, sets the variable to 1. If `FALSE`, sets the variable to 0.   \r\n     \r\n        location <- toupper(location)\r\n        outcome <- tolower(outcome)\r\n        state_list <- unique(outcome_dat_organized$state)\r\n        outcome_list <- colnames(outcome_dat_organized)\r\n        num_list <- c(1:9999)\r\n        \r\n        x <- (as.numeric(location %in% state_list))\r\n        y <- (as.numeric(outcome %in% outcome_list))\r\n        z <- (as.numeric(num %in% num_list))\r\n\r\n\r\n### The next section does several if loops to determine if there are mismatching inputs of any sort, and will stop the function if the user provides an invalid input.\r\n        \r\n        if (x == 0 && y == 0 && z == 0) {\r\n            stop(\"Invalid state, outcome, and number. Please enter valid values.\")\r\n        } else if (x == 0 && y == 0) {\r\n            stop(\"Invalid state and outcome. Please enter valid values.\")\r\n        } else if (x == 0) {\r\n            stop(\"Invalid state. Please enter a valid value\")\r\n        } else if (y == 0) {\r\n            stop(\"Invalid outcome. Please enter a valid outcome.\")\r\n        } else if (is.character(num) == TRUE)  {\r\n                if(num != \"worst\" || num != \"best\") {\r\n                    stop(\"The number you entered is invalid. Please enter a valid number.\") \r\n                }\r\n        } else if (num > len) {\r\n            stop(\"The number you entered is greater than the number of hospitals in that state. Enter a lower number.\")\r\n                } else if (z == 0) {\r\n            stop(\"Invalid number. Please enter a valid number.\")\r\n        } else {\r\n\r\n### The next part creates columns that rank each outcome. It then uses if loops to rename them.\r\n            \r\n            state_subset$`heart attack` <-\r\n                as.numeric(state_subset$`heart attack`)\r\n            \r\n            state_subset$`heart failure` <-\r\n                as.numeric(state_subset$`heart failure`)\r\n            \r\n            state_subset$pneumonia <-\r\n                as.numeric(state_subset$pneumonia)\r\n            \r\n            state_subset$rank_heartattack <-\r\n                rank(state_subset$`heart attack`,\r\n                     ties.method = \"min\")\r\n            \r\n            state_subset$rank_heartfailure <-\r\n                rank(state_subset$`heart failure`,\r\n                     ties.method = \"min\")\r\n            \r\n            state_subset$rank_pneumonia <-\r\n                rank(state_subset$pneumonia,\r\n                     ties.method = \"min\")\r\n            \r\n            if (outcome == \"heart attack\") {\r\n                column_name <- c(\"rank_heartattack\")\r\n                \r\n            } else if (outcome == \"heart failure\") {\r\n                column_name <- c(\"rank_heartfailure\")\r\n                \r\n            } else { \r\n                column_name <- c(\"rank_pneumonia\")\r\n            }\r\n\r\n\r\n### Create one more data frame, then searches for the cell number that the user input.\r\n            \r\n            rank_dat <-\r\n                with(state_subset, state_subset[order(state_subset[[column_name]],\r\n                                                      state_subset$hospital), ])\r\n            \r\n            if (is.numeric(num) == TRUE)\r\n                print(rank_dat$hospital[num])\r\n            \r\n        }\r\n            \r\n    }\r\n\r\n    ## Test it a few times.\r\n\r\n    rank_hosp(\"TX\", \"heart failure\", 4)\r\n    rank_hosp(\"MD\", \"heart attack\", \"worst\")\r\n    rank_hosp(\"MN\", \"heart attack\", 5000)\r\n    rank_hosp(\"AL\", \"heart attack\", 5)\r\n    rank_hosp(\"AF\", \"cancer\", 5)\r\n    rank_hosp(\"DE\", \"pneumonia\", \"best\")\r\n    rank_hosp(\"OH\", \"pneumonia\", \"not always the best\")\r\n\r\n\r\n### Here's what the test output looks like currently.\r\n\r\n    > rank_hosp(\"TX\", \"heart failure\", 4)\r\n    [1] \"DETAR HOSPITAL NAVARRO\"\r\n\r\n    > rank_hosp(\"MD\", \"heart attack\", \"worst\")\r\n    [1] \"HARFORD MEMORIAL HOSPITAL\"\r\n\r\n    > rank_hosp(\"MN\", \"heart attack\", 5000)\r\n      Error in rank_hosp(\"MN\", \"heart attack\", 5000) : \r\n        The number you entered is greater than the number of hospitals in that state. Enter a lower number.\r\n\r\n    > rank_hosp(\"AL\", \"heart attack\", 5)\r\n    [1] \"PRATTVILLE BAPTIST HOSPITAL\"\r\n    > rank_hosp(\"AF\", \"cancer\", 5)\r\n     Error in rank_hosp(\"AF\", \"cancer\", 5) : \r\n       Invalid state and outcome. Please enter valid values.\r\n\r\n    > rank_hosp(\"DE\", \"pneumonia\", \"best\")\r\n    [1] \"BEEBE MEDICAL CENTER\"\r\n\r\n    > rank_hosp(\"OH\", \"pneumonia\", \"not always the best\")\r\n    Error in rank_hosp(\"OH\", \"pneumonia\", \"not always the best\") : \r\n      The number you entered is invalid. Please enter a valid number.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}